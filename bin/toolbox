#!/usr/bin/env bash
# Deploys the toolbox in a pod. The Toolbox contains utilities such as skaffold and kustomize
#
SCRIPT_NAME="$(basename "$0")"

# Remote:
TOOLBOX_URL=https://github.com/ForgeRock/forgeops/blob/master/kustomize/base/toolbox
# For local testing
# TOOLBOX_URL=kustomize/base/toolbox

if ! command -v kustomize >/dev/null 2>&1;
then
    echo "kustomize binary required"
fi

if ! command -v kubectl >/dev/null 2>&1;
then
    echo "kubectl binary required"
fi

usage () {
read -r -d '' help <<-EOF

ForgeOps Toolbox CLI

A wrapper script for deploying the ForgeOps toolkit inside a cluster.

This script generates a kustomize profile, and then deploys the toolbox.

Usage:  ${SCRIPT_NAME} [OPTIONS] COMMAND

Command:
    start   start the toolbox pod on kubernetes
    stop    stop (pause) the toolbox. The persistent volume claims will not be deleted
    exec    Get a tmux shell inside the toolbox
    nuke    Completely destroy the toolbox and the pvc. You can not recover any saved data
    backup  Copies the contents of your toolbox /opt/workspace to ./tmp/workspace

Options:

    -h         help
EOF
    printf "%-10s" "$help"
}

load_ns () {
    ns=$(kubectl config view --minify --output 'jsonpath={..namespace}' | tr -d '\n')
    if [[ "${ns}" == "" ]];
    then
        # return nothing validation will throw error
        return 1
    fi
    echo "${ns}"
}

init () {

    if ! k8s get ns "${NAMESPACE}";
    then
        echo "${NAMESPACE} not found, attempting to create"
        if ! k8s create ns "${NAMESPACE}";
        then
            echo "Couldn't create ${NAMESPACE}, exiting"
            return 1;
        fi
        echo "${NAMESPACE} created!";
    fi
    if ! k8s config set-context --current --namespace=${NAMESPACE};
    then
        echo "couldn't set context to ${NAMESPACE}";
    fi
    if ! k8s get secret kaniko-secret;
    then
        if ! k8s --namespace kaniko get secret kaniko-secret;
        then
            echo "kaniko secret for building images doesn't exist please create it"
            echo "see: https://github.com/GoogleContainerTools/kaniko#running-kaniko-in-a-kubernetes-cluster"
            echo "I will continue to run the toolbox, but you may not be able to build images or run skaffold"
            return 0
        fi
    fi
    return 0
}

# surpress kubectl output
k8s () {
    if ! kubectl "${@}" > /dev/null 2>&1;
    then
        return 1
    fi
}

# TODO: Replace this with kpt or some other mechanism..
get_toolbox_manifest() {
    kustomize build $TOOLBOX_URL | sed -e "s/namespace:\ default/namespace:\ $NAMESPACE/" >/tmp/toolbox.yaml
}

start() {
    echo "Deploying toolbox to $NAMESPACE namespace"
    get_toolbox_manifest

    if ! kubectl apply -f /tmp/toolbox.yaml;
    then
        echo "failed to deploy toolbox";
        return 1
    fi
    echo ""
    echo "Give the toolbox time to start up. When ready, run"
    echo "toolbox exec"
    echo "or use"
    echo "kubectl exec -it forgeops-cdk-toolbox -- tmux"
    echo "You can also connect to the toolbox using VSCode remote"
    return 0
}

stop () {
    get_toolbox_manifest
    echo "Stoping the pod. This will NOT delete the data on the pvc"
    kubectl delete pod forgeops-cdk-toolbox
    return $?
}

exec_pod() {
    echo "Getting a shell in the toolbox"
    kubectl -n $NAMESPACE exec forgeops-cdk-toolbox -it -- tmux
}

backup() {
  echo "Backing up the toolbox pod /opt/workspace to ./tmp/workspace"
  echo "WARNING: If you added a github SSH key in the toolbox you may want to remove ./tmp/workspace/.ssh"
  mkdir -p ./tmp
  kubectl cp  forgeops-cdk-toolbox:/opt/workspace ./tmp/workspace
}

NAMESPACE=$(load_ns)

# arg/opt parse
while getopts n:h option
do
    case "${option}"
        in
        n) NAMESPACE=${OPTARG};;
        h) usage; exit 0;;
        *) usage; exit 1;;
    esac
done
shift $((OPTIND - 1))

if [[ "$#" != 1 ]];
then
    echo "one argument is expected"
    usage
    exit 1
fi


nuke() {
    echo "Deleting the toolbox. This is not recoverable"
    read -p "Are you sure? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        get_toolbox_manifest
        kubectl delete -f /tmp/toolbox.yaml
    else
        echo "not deleted"
    fi
}

while (( "$#" )); do
    case "$1" in
        start)
            shift
            start
            ;;
        stop)
            shift
            stop
            ;;
        nuke)
            shift
            nuke
            ;;
        exec)
            shift
            exec_pod
            ;;
        backup)
            shift
            backup
            ;;
        *)
            usage
            ;;
    esac
done

