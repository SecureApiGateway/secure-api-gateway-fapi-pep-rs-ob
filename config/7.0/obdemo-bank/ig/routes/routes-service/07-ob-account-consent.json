{
  "comment": "Open Banking Account Access Consents",
  "name" : "07 - Open Banking Account Access Consent (sync PR test)",
  "auditService": "AuditService-OB-Route",
  "baseURI" : "https://&{iam.fqdn}",
  "condition" : "${matches(request.uri.path, '^/rs/open-banking/v3.1/aisp/account-access-consents')}",
  "handler": {
    "type": "Chain",
    "config": {
      "filters": [
        {
          "comment": "Check Open Banking compliant response",
          "name": "ObResponseCheck",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "ObResponseCheck.groovy"
          }
        },
        {
          "comment": "Extract client certificate details",
          "name": "ParseCertificate",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "ParseCertificate.groovy",
            "args": {
              "routeArgCertificateHeader": "ssl-client-cert"
            }
          }
        },
        {
          "comment": "Make sure client certificate includes AISP role",
          "name" : "CertificateRoleCheck",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "CertificateRoleCheck.groovy",
            "args": {
              "routeArgRole": "AISP"
            }
          }
        },
        {
          "comment": "Extract client certificate thumbprint for cert bound access tokens",
          "name": "CertificateThumbprintFilter-1",
          "type": "CertificateThumbprintFilter",
          "config": {
            "certificate": "${pemCertificate(urlDecode(request.headers['ssl-client-cert'][0]))}",
            "failureHandler": {
              "type": "ScriptableHandler",
              "config": {
                "type": "application/x-groovy",
                "source": [
                  "def response = new Response(Status.TEAPOT);",
                  "response.entity = 'Failure in CertificateThumbprintFilter'",
                  "return response"
                ]
              }
            }
          }
        },
        {
          "comment": "Check access token with AM",
          "name" : "OAuth2ResourceServerFilter-OB",
          "type" : "OAuth2ResourceServerFilter",
          "config" : {
            "scopes" : [ "accounts" ],
            "requireHttps" : false,
            "realm" : "OpenIG",
            "accessTokenResolver" : {
              "type": "ConfirmationKeyVerifierAccessTokenResolver",
              "config": {
                "delegate": {
                  "name": "token-resolver-1",
                  "type": "TokenIntrospectionAccessTokenResolver",
                  "config": {
                    "endpoint": "https://&{iam.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/introspect",
                    "providerHandler": {
                      "type": "Chain",
                      "config": {
                        "filters": [
                          {
                            "type": "HttpBasicAuthenticationClientFilter",
                            "config": {
                              "username": "&{ig.agent.id}",
                              "passwordSecretId": "ig.agent.password",
                              "secretsProvider": "SystemAndEnvSecretStore-IAM"
                            }
                          }
                        ],
                        "handler": "ForgeRockClientHandler"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "commment": "Prepare account consent for IDM",
          "name": "ProcessAccountConsent",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "ProcessAccountConsent.groovy",
            "args": {
              "routeArgObjAccountAccessConsent": "accountAccessIntent",
              "routeArgObjApiClient": "apiClient",
              "routeArgConsentIdPrefix": "AAC_"
            }
          }
        },
        {
          "commment": "Prepare audit trail for consent",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "AuditConsent.groovy",
            "args": {
              "auditService": "${heap['AuditService-OB-Consent']}",
              "clock": "${heap['Clock']}",
              "consentIdLocator": "response.entity.getJson().Data.ConsentId",
              "role": "AISP",
              "event": "CREATE"
            }
          }
        },
        {
          "comment": "Add Host header for downstream IDM",
          "name" : "HeaderFilter-ChangeHostToIDM",
          "type" : "HeaderFilter",
          "config" : {
            "messageType" : "REQUEST",
            "remove" : [ "host" ]
          }
        },
        {
          "comment": "Add access token to IDM request",
          "type": "ClientCredentialsOAuth2ClientFilter",
          "config": {
            "clientId": "&{ig.client.id}",
            "clientSecretId": "ig.client.secret",
            "secretsProvider": "SystemAndEnvSecretStore-IAM",
            "tokenEndpoint": "https://&{iam.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/access_token",
            "scopes": [
              "fr:idm:*"
            ],
            "handler": "TokenRequestHandler"
          }
        }
      ],
      "handler": "ReverseProxyHandler"
    }
  }
} 
