{
  "name" : "OB Payment Submission",
  "baseURI" : "http://obdemo-rs:8089",
  "condition" : "${matches(request.uri.path, '^/rs/openbanking/v3.1/domestic-payments$')}",
  "capture" : [ "response", "request" ],
  "heap" : [
    {
      "name" : "ReverseProxyHandler",
      "type" : "ReverseProxyHandler",
      "capture" : [ "response", "request" ]
    },
    {
      "name" : "capture",
      "type" : "CaptureDecorator",
      "config" : {
        "captureEntity" : true,
        "captureContext" : true
      }
    },
    {
      "name" : "ForgeRockClientHandler",
      "type" : "Chain",
      "config" : {
        "filters" : [ "TransactionIdOutboundFilter" ],
        "handler" : "ClientHandler"
      },
      "capture" : [ "response", "request" ]
    }
  ],
  "handler" : {
    "type" : "Chain",
    "config" : {
      "filters" : [
        {
          "name" : "FormatJsonFilter",
          "type" : "FormatJsonFilter",
          "config" : { }
        },
        {
          "type": "UriPathRewriteFilter",
          "config": {
            "mappings": {
              "/rs": "/"
            },
            "failureHandler": {
              "type": "StaticResponseHandler",
              "config": {
                "status": 500,
                "headers": {
                  "Content-Type": [
                    "text/plain"
                  ]
                },
                "entity": "Invalid URL produced"
              }
            }
          }
        },
        {
          "name" : "CertificateExtensionValidatorFilter",
          "type" : "CertificateExtensionValidatorFilter",
          "config" : {
            "routeRole" : "Payment Initiation",
            "clientCertificateHeaderName" : "ssl-client-cert"
          }
        },
        {
          "name" : "OAuth2ResourceServerFilter-OBIE",
          "type" : "OAuth2ResourceServerFilter",
          "config" : {
            "scopes" : [ "payments", "openid" ],
            "requireHttps" : false,
            "realm" : "OpenIG",
            "accessTokenResolver" : {
              "type": "StatelessAccessTokenResolver",
              "config": {
                "secretsProvider": "SecretsProvider-AmJWK",
                "issuer": "https://&{iam.fqdn}/am/oauth2/realms/root/realms/&{am.realm}",
                "verificationSecretId": "any.value.in.regex.format"
              }

            }
          }
        },
        {
          "name": "EncodeInitiation",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "source": [
              "import groovy.json.JsonOutput",
              "import java.util.Base64",
              "def initiationRequest = Base64.getEncoder().encodeToString(JsonOutput.toJson(request.entity.getJson().Data.Initiation).bytes)",
              "logger.debug('request ' + initiationRequest)",
              "attributes.put('initiationRequest',initiationRequest)",
              "next.handle(context, request)"
            ]

          }
        },
        {
          "name" : "PolicyEnforcementFilter-OBIE Assets Authorization Filter",
          "type" : "PolicyEnforcementFilter",
          "config" : {
            "pepRealm" : "/&{am.realm}",
            "application" : "Open Banking",
            "claimsSubject" : {
              "sub": "${contexts.oauth2.accessToken.info.sub}",
              "intent_type": "pisp"
            },
            "environment": {
              "sub": [ "${contexts.oauth2.accessToken.info.sub}" ],
              "tpp_client_id" : [ "${contexts.oauth2.accessToken.info.aud}" ],
              "tpp_cert_id" : [ "${attributes.tppId}" ],
              "intent_id": [ "${toJson(contexts.oauth2.accessToken.info.claims).id_token.openbanking_intent_id.value}" ],
              "initiation" : [ "${attributes.initiationRequest}"]
            },
            "amService" : "AmService-OBIE"
          }
        },
        {
          "name": "TranslatePaymentResource",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "TranslatePaymentResource.groovy",
            "args": {
              "accounts": "${contexts.jwtBuilder.value}"
            }
          }
        }
      ],
      "handler" : "ReverseProxyHandler"
    }
  }
}