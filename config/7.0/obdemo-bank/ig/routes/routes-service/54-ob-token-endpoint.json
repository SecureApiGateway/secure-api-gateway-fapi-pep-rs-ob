{
  "comment": "Authorise access to token endpoint",
  "name" : "54 - Open Banking OAuth2 token endpoint",
  "auditService": "AuditService-OB-Route",
  "baseURI" : "https://&{identity.platform.fqdn}",
  "condition" : "${matches(request.uri.path, '^/am/oauth2/realms/root/realms/&{am.realm}/access_token')}",
  "handler": {
    "type": "Chain",
    "config": {
      "filters": [
        {
          "comment": "Ensure Open Banking compliant response",
          "name": "ObResponseCheck",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "ObResponseCheck.groovy"
          }
        },
        {
          "comment": "Add host to downstream request",
          "name": "HeaderFilter-ChangeHostToIAM",
          "type": "HeaderFilter",
          "config": {
            "messageType": "REQUEST",
            "remove": [
              "host",
              "X-Forwarded-Host"
            ],
            "add": {
              "X-Forwarded-Host": [
                "&{ig.fqdn}"
              ]
            }
          }
        },
        {
          "comment": "Extract certificate thumbprint for use in cert bound access token check",
          "name": "CertificateThumbprintFilter-1",
          "type": "CertificateThumbprintFilter",
          "config": {
            "certificate": "${pemCertificate(urlDecode(request.headers['ssl-client-cert'][0]))}",
            "failureHandler": {
              "type": "ScriptableHandler",
              "config": {
                "type": "application/x-groovy",
                "source": [
                  "def response = new Response(Status.TEAPOT);",
                  "response.entity = 'Failure in CertificateThumbprintFilter'",
                  "return response"
                ]
              }
            }
          }
        },
        {
          "comment": "Add the extracted cert thumbprint to the token request",
          "name" : "AddCnf",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "AddCnfKey.groovy"
          }
        },
        {
          "comment": "Add gateway access token to request (custom AT modification script checks access token to enforce route via IG)",
          "type": "ClientCredentialsOAuth2ClientFilter",
          "config": {
            "clientId": "&{ig.client.id}",
            "clientSecretId": "ig.client.secret",
            "secretsProvider": "SystemAndEnvSecretStore-IAM",
            "tokenEndpoint": "https://&{identity.platform.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/access_token",
            "scopes": [
              "trusted_gateway"
            ],
            "handler": "TokenRequestHandler"
          }
        },
        {
          "comment": "Add gateway access token to downstream request",
          "name" : "AddGatewayAuthorization",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "AddGatewayAuthorization.groovy"
          }
        }
      ],
      "handler": "ReverseProxyHandler"
    }
  }
} 
