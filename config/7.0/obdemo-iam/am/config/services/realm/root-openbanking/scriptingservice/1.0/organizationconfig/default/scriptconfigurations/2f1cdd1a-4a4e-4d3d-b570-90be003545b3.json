{
  "metadata" : {
    "realm" : "/openbanking",
    "entityType" : "ScriptingService",
    "entityId" : "default/scriptConfigurations/2f1cdd1a-4a4e-4d3d-b570-90be003545b3",
    "uid" : "ou=2f1cdd1a-4a4e-4d3d-b570-90be003545b3,ou=scriptConfigurations,ou=default,ou=OrganizationConfig,ou=1.0,ou=ScriptingService,ou=services,o=openbanking,ou=services,ou=am-config",
    "sunServiceID" : "scriptConfiguration",
    "objectClass" : [ "top", "sunServiceComponent" ],
    "pathParams" : { },
    "ou" : [ "2f1cdd1a-4a4e-4d3d-b570-90be003545b3" ]
  },
  "data" : {
    "_id" : "default/scriptConfigurations/2f1cdd1a-4a4e-4d3d-b570-90be003545b3",
    "_type" : {
      "_id" : "ScriptingService",
      "name" : "ScriptingService",
      "collection" : false
    },
    "createdBy" : "null",
    "lastModifiedDate" : "0",
    "lastModifiedBy" : "null",
    "name" : "Open Banking Dynamic Policy",
    "context" : "POLICY_CONDITION",
    "description" : null,
    "language" : "JAVASCRIPT",
    "creationDate" : "0",
    "script" : ""
  }
}