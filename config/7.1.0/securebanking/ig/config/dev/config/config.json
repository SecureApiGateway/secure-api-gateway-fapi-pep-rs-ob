{
  "properties": {
    "security": {
      "allowIgIssuedTestCerts": true
    },
    "oauth2": {
      "tokenEndpointAuthMethodsSupported": ["private_key_jwt"]
    },
    "urls": {
      "idmGetApiClientBaseUri": "https://&{identity.platform.fqdn}/openidm/managed/apiClient"
    },
    "vertxConfig": {
      "maxHeaderSize": 16384,
      "initialSettings": {
        "maxHeaderListSize": 16384
      }
    }
  },
  "handler": "_router",
  "heap": [
    {
      "name": "_router",
      "type": "Router",
      "config": {
        "scanInterval": "30 seconds",
        "directory": "${openig.configDirectory}/routes",
        "defaultHandler": {
          "type": "DispatchHandler",
          "config": {
            "bindings": [
              {
                "condition": "${request.method == 'GET' and request.uri.path == '/'}",
                "handler": {
                  "type": "WelcomeHandler"
                }
              },
              {
                "condition": "${request.uri.path == '/'}",
                "handler": {
                  "type": "StaticResponseHandler",
                  "config": {
                    "status": 405,
                    "reason": "Method Not Allowed"
                  }
                }
              },
              {
                "handler": {
                  "type": "StaticResponseHandler",
                  "config": {
                    "status": 404,
                    "reason": "Not Found"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "capture",
      "type": "CaptureDecorator",
      "config": {
        "captureEntity": true
      }
    },
    {
      "name": "ReverseProxyHandler",
      "type": "ReverseProxyHandler",
      "capture": [
        "request",
        "response"
      ],
      "config": {
        "vertx": "${vertxConfig}"
      }
    },
    {
      "name": "ReverseProxyHandlerNoCapture",
      "type": "ReverseProxyHandler",
      "comment": "ReverseProxyHandler with no capture decorator configuration",
      "config": {
        "vertx": "${vertxConfig}"
      }
    },
    {
      "name": "JwtSession",
      "type": "JwtSession"
    },
    {
      "name" : "ForgeRockClientHandler",
      "type" : "Chain",
      "config" : {
        "filters" : [ 
          "TransactionIdOutboundFilter"
       ],
        "handler" : "ClientHandler"
      },
      "capture" : [ "response", "request" ]
    },
    {
      "name": "FetchApiClientResourcesChain",
      "type": "ChainOfFilters",
      "comment": "This filter chain will set the apiClient, apiClientJwkSet and trustedDirectory attributes in the context based on the client_id of the access_token",
      "config" : {
        "filters": [
          {
            "comment": "Add ApiClient data to the context attributes",
            "name": "FetchApiClientFilter",
            "type": "FetchApiClientFilter",
            "config": {
              "idmGetApiClientBaseUri": "&{urls.idmGetApiClientBaseUri}",
              "clientHandler": "IDMClientHandler"
            }
          },
          {
            "comment": "Add TrustedDirectory configuration to the context attributes",
            "name": "FetchTrustedDirectoryFilter",
            "type": "FetchTrustedDirectoryFilter",
            "config": {
              "trustedDirectoryService": "TrustedDirectoriesService"
            }
          },
          {
            "comment": "Add the JWKS for the ApiClient to the context attributes",
            "name": "FetchApiClientJwksFilter",
            "type": "FetchApiClientJwksFilter",
            "config": {
              "jwkSetService": "OBJwkSetService"
            }
          }
        ]
      }
    },
    {
      "name": "SBATFapiInteractionFilterChain",
      "type": "ChainOfFilters",
      "comment": "This filter chain will set the x-fapi-interaction-id (if not provided in the request), and also set the transaction context to the x-fapi-interaction-id value. This means that if the 'TransactionIdOutboundFilter' is specified on any handlers used by the chain the x-fapi-interaction-id value will be passed onward in the X-ForgeRock-TransactionId header",
      "config" : {
        "filters": [
          {
            "comment": "Add x-fapi-interaction-id header if one was not present in the request",
            "name": "FapiInteractionIdFilter",
            "type": "FapiInteractionIdFilter"
          },
          {
            "comment": "Copy the x-fapi-interaction-id header to TransactionIdContext",
            "name": "FapiTransactionIdFilter-1",
            "type": "ScriptableFilter",
            "config": {
              "type": "application/x-groovy",
              "file": "FapiTransactionIdFilter.groovy"
            }
          }
        ]
      }
    },
    {
      "name": "SBATReverseProxyHandlerIdentityPlatform",
      "comment": "ReverseProxyHandler for calls to Identity Platform services (AM or IDM)",
      "type": "Chain",
      "config": {
        "filters" : [ 
          "TransactionIdOutboundFilter"
       ],
        "handler" : "ReverseProxyHandler"
      }
    },
    {
      "name": "SBATReverseProxyHandlerIdentityPlatformNoCapture",
      "comment": "ReverseProxyHandler for calls to Identity Platform services (AM or IDM), with the capture decorator disabled",
      "type": "Chain",
      "config": {
        "filters" : [
          "TransactionIdOutboundFilter"
        ],
        "handler" : "ReverseProxyHandlerNoCapture"
      }
    },
    {
      "name": "SBATReverseProxyHandlerRs",
      "comment": "ReverseProxyHandler for calls to the SBAT RS",
      "type": "Chain",
      "config": {
        "filters": [
          {
            "comment": "Add x-ob-url header (used by RS)",
            "name": "HeaderFilter-Add-x-ob-url",
            "type": "HeaderFilter",
            "config": {
              "messageType": "REQUEST",
              "add": {
                "x-ob-url": [
                  "https://&{ig.fqdn}${contexts.router.remainingUri}"
                ]
              }
            }
          },
          "TransactionIdOutboundFilter"
        ],
        "handler": "ReverseProxyHandler"
      }
    },
    {
      "name" : "AmService-OBIE",
      "type" : "AmService",
      "config" : {
        "url" : "https://&{identity.platform.fqdn}/am",
        "realm" : "/&{am.realm}",
        "version" : "7.2.0",
        "agent" : {
          "username" : "ig-agent",
          "passwordSecretId" : "ig.agent.password"
        },
        "secretsProvider": "SystemAndEnvSecretStore-IAM",
        "sessionCache" : {
          "enabled" : false
        },
        "notifications" : {
          "enabled" : false
        }
      }
    },
    {
      "name": "SystemAndEnvSecretStore-IAM",
      "type": "SystemAndEnvSecretStore",
      "config": {
        "format": "PLAIN"
      }
    },
    {
      "name": "TokenRequestHandler",
      "type": "ScriptableHandler",
      "config": {
        "type": "application/x-groovy",
        "args": {
          "userId": "&{ig.idm.user}",
          "password": "&{ig.idm.password}"
        },
        "file": "SettingNewEntity.groovy",
        "clientHandler": "ForgeRockClientHandler"
      }
    },
    {
      "name": "SecretsProvider-AmJWK",
      "type": "SecretsProvider",
      "config": {
        "stores": [
          {
            "type": "JwkSetSecretStore",
            "config": {
              "jwkUrl": "https://&{identity.platform.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/connect/jwk_uri"
            }
          }
        ]
      }
    },
    {
      "name": "SecretsProvider-ASPSP",
      "type": "SecretsProvider",
      "config": {
        "stores": [
          {
            "name":"KeyStoreSecretStore-ASPSP",
            "type": "KeyStoreSecretStore",
            "config": {
              "file": "&{ig.instance.dir}&{aspsp.keystore.path}",
              "storeType": "PKCS12",
              "storePassword": "aspsp.keystore.password",
              "keyEntryPassword": "aspsp.keystore.password",
              "secretsProvider": "SystemAndEnvSecretStore-IAM",
              "mappings": [{
                "secretId": "&{aspsp.jwtsigner.alias}",
                "aliases": [ "&{aspsp.jwtsigner.alias}" ]
              }]
            }
          }
        ]
      }
    },

    {
      "name": "IDMClientHandler",
      "type": "Chain",
      "capture": "all",
      "config": {
        "filters": [
          {
            "type": "ClientCredentialsOAuth2ClientFilter",
            "config": {
              "clientId": "&{ig.client.id}",
              "clientSecretId": "ig.client.secret",
              "secretsProvider": "SystemAndEnvSecretStore-IAM",
              "tokenEndpoint": "https://&{identity.platform.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/access_token",
              "scopes": [
                "fr:idm:*"
              ],
              "handler": "TokenRequestHandler"
            }
          }
        ],
        "handler": "ForgeRockClientHandler"
      }
    },
    {
      "name": "AuditService-OB-Route",
      "type": "AuditService",
      "config": {
        "config": {
          "filterPolicies": {
            "field": {
              "includeIf": [
                "/access/http/request/headers/x-fapi-interaction-id"
              ]
            }
          }
        },
        "eventHandlers": [
          {
            "class": "org.forgerock.audit.handlers.json.stdout.JsonStdoutAuditEventHandler",
            "config": {
              "name": "jsonstdout",
              "elasticsearchCompatible": false,
              "topics": [
                "access"
              ]
            }
          }
        ]
      }
    },
    {
      "name": "AuditService-OB-Consent",
      "type": "AuditService",
      "config": {
        "config": {

        },
        "eventHandlers": [
          {
            "class": "org.forgerock.audit.handlers.json.stdout.JsonStdoutAuditEventHandler",
            "config": {
              "name": "jsonstdout",
              "elasticsearchCompatible": false,
              "topics": [
                "ObConsentTopic"
              ]
            }
          }
        ]
      }
    },
    {
      "name": "SecretKeyPropertyFormat-Gateway",
      "type": "SecretKeyPropertyFormat",
      "config": {
        "format": "PLAIN",
        "algorithm": "AES"
      }
    },
    {
      "name": "SystemAndEnvSecretStore-Gateway",
      "type": "SystemAndEnvSecretStore",
      "config": {
        "mappings": [{
          "secretId": "ig.gw.secret",
          "format": "SecretKeyPropertyFormat-Gateway"
        }]
      }
    },
    {
      "name": "TrustManager-OB",
      "type": "TrustManager",
      "config": {
        "keystore": {
          "type": "KeyStore",
          "config": {
            "url": "file://&{ig.instance.dir}/secrets/trust.p12",
            "type": "PKCS12",
            "passwordSecretId": "ca.keystore.storepass",
            "secretsProvider": "SystemAndEnvSecretStore-IAM"
          }
        }
      }
    },
    {
      "name": "OBClientHandler",
      "type": "ClientHandler",
      "capture": "all",
      "config": {
        "tls": {
          "type": "ClientTlsOptions",
          "config": {
            "trustManager": "TrustManager-OB"
          }
        }
      }
    },
    {
      "name": "OBReverseProxyHandler",
      "type": "ReverseProxyHandler",
      "capture": [
        "request",
        "response"
      ],
      "config": {
        "tls": {
          "type": "ClientTlsOptions",
          "config": {
            "trustManager": "TrustManager-OB"
          }
        }
      }
    },
    {
      "name":"KeyStoreSecretStore-TA",
      "type": "KeyStoreSecretStore",
      "config": {
        "file": "&{ig.instance.dir}/secrets/test.authority.p12",
        "storeType": "PKCS12",
        "storePassword": "ca.keystore.storepass",
        "keyEntryPassword": "ca.keystore.storepass",
        "secretsProvider": "SystemAndEnvSecretStore-IAM",
        "mappings": [{
          "secretId": "jwt.signer",
          "aliases": [ "jwt-signer" ]
        }]
      }
    },
    {
      "name": "OBJwkSetService",
      "type": "CaffeineCachingJwkSetService",
      "config": {
        "handler": "OBClientHandler",
        "maxCacheEntries": 500,
        "expireAfterWriteDuration": "24 hours"
      }
    },
    {
      "name": "TrustedDirectoriesService",
      "type": "TrustedDirectoriesService",
      "comment": "Used to obtain meta information about a trusted directory by look up using the 'iss' field value",
      "config": {
        "enableIGTestTrustedDirectory": true,
        "SecureApiGatewayJwksUri": "https://&{ig.fqdn}/jwkms/apiclient/jwks"
      }
    },
    {
      "name": "RsaJwtSignatureValidator",
      "type": "RsaJwtSignatureValidator"
    }
  ],
  "monitor": true
}
