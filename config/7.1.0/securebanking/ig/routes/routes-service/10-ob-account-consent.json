{
  "comment": "Open Banking Account Access Consents",
  "name": "10 - Open Banking Account Access Consent",
  "auditService": "AuditService-OB-Route",
  "baseURI": "https://&{identity.platform.fqdn}",
  "condition": "${matches(request.uri.path, '^/rs/open-banking/v(\\\\d+.)?(\\\\d+.)?(\\\\*|\\\\d+)/aisp/account-access-consents')}",
  "handler": {
    "type": "Chain",
    "config": {
      "filters": [
        "SBATFapiInteractionFilterChain",
        {
          "comment": "Add x-fapi-interaction-id header if one was not present in the request",
          "name": "FapiInteractionIdFilter",
          "type": "FapiInteractionIdFilter"
        },
        {
          "comment": "Check Open Banking compliant response",
          "name": "ObResponseCheck",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "ObResponseCheck.groovy"
          }
        },
        {
          "comment": "Extract client certificate details",
          "name": "ParseCertificate",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "ParseCertificate.groovy",
            "args": {
              "routeArgCertificateHeader": "ssl-client-cert"
            }
          }
        },
        {
          "comment": "Extracts the access_token from the request header. Uses the resolver to resolve the access_token and validate the token claims. Checks that the token has the scopes required by the filter configuration. Injects the access_token info into the OAuth2Context.",
          "name": "OAuth2ResourceServerFilter-OB",
          "type": "OAuth2ResourceServerFilter",
          "config": {
            "scopes": [
              "accounts"
            ],
            "requireHttps": false,
            "realm": "OpenIG",
            "accessTokenResolver": {
              "comment": "Check certificate-bound OAuth 2.0 bearer tokens presented by clients use the same mTLS-authenticated HTTP connection",
              "type": "ConfirmationKeyVerifierAccessTokenResolver",
              "config": {
                "delegate": {
                  "name": "token-resolver-1",
                  "type": "StatelessAccessTokenResolver",
                  "config": {
                    "secretsProvider": "SecretsProvider-AmJWK",
                    "issuer": "https://&{ig.fqdn}/am/oauth2/realms/root/realms/&{am.realm}",
                    "verificationSecretId": "any.value.in.regex.format"
                  }
                }
              }
            }
          }
        },
        "FetchApiClientResourcesChain",
        {
          "comment": "Make sure client certificate includes AISP role",
          "name": "CertificateRoleCheck",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "CertificateRoleCheck.groovy",
            "args": {
              "routeArgRole": "AISP"
            }
          }
        },
        {
          "comment": "Extract client certificate thumbprint for cert bound access tokens",
          "name": "CertificateThumbprintFilter-1",
          "type": "CertificateThumbprintFilter",
          "config": {
            "certificate": "${pemCertificate(urlDecode(request.headers['ssl-client-cert'][0]))}",
            "failureHandler": {
              "type": "ScriptableHandler",
              "config": {
                "type": "application/x-groovy",
                "file": "ReturnInvalidCnfKeyError.groovy"
              }
            }
          }
        },
        {
          "comment": "Check grant type",
          "name": "Grant Type Verifier",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "GrantTypeVerifier.groovy",
            "args": {
              "allowedGrantType": "client_credentials"
            }
          }
        },
        {
          "commment": "Prepare account consent for IDM - change request URL and add CREST action",
          "name": "ProcessAccountConsent",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "ProcessAccountConsent.groovy",
            "args": {
              "routeArgObjAccountAccessConsent": "accountAccessIntent",
              "routeArgObjApiClient": "apiClient",
              "routeArgConsentIdPrefix": "AAC_"
            }
          }
        },
        {
          "comment": "Prepare audit trail for consent",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "AuditConsent.groovy",
            "args": {
              "auditService": "${heap['AuditService-OB-Consent']}",
              "clock": "${heap['Clock']}",
              "consentIdLocator": "response.entity.getJson().OBIntentObject.Data.ConsentId",
              "role": "AISP",
              "event": "CREATE"
            }
          }
        },
        {
          "comment": "Add Host header for downstream IDM",
          "name": "HeaderFilter-ChangeHostToIDM",
          "type": "HeaderFilter",
          "config": {
            "messageType": "REQUEST",
            "remove": [
              "host"
            ]
          }
        },
        {
          "comment": "Obtain access token from authz server and add request's Authorization header",
          "type": "ClientCredentialsOAuth2ClientFilter",
          "config": {
            "clientId": "&{ig.client.id}",
            "clientSecretId": "ig.client.secret",
            "secretsProvider": "SystemAndEnvSecretStore-IAM",
            "tokenEndpoint": "https://&{identity.platform.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/access_token",
            "scopes": [
              "fr:idm:*"
            ],
            "handler": "TokenRequestHandler"
          }
        }
      ],
      "handler": "SBATReverseProxyHandlerIdentityPlatform"
    }
  }
}