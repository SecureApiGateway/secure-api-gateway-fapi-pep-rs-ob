{
  "properties": {
    "SsoTokenCookieOrHeader": "&{identity.platform.cookie|iPlanetDirectoryPro}"
  },
  "heap": [
    {
      "name": "ClientHandler",
      "type": "ClientHandler",
      "capture": "all"
    },
    {
      "name": "SystemAndEnvSecretStore-Admin",
      "type": "SystemAndEnvSecretStore",
      "config": {
        "format": "PLAIN"
      }
    },
    {
      "name": "AmService",
      "type": "AmService",
      "config": {
        "url": "https://&{identity.platform.fqdn}/am",
        "realm": "/&{am.realm}",
        "agent": {
          "username": "ig-agent",
          "passwordSecretId": "ig.agent.password"
        },
        "secretsProvider": "SystemAndEnvSecretStore-Admin",
        "sessionCache": {
          "enabled": false
        },
        "notifications": {
          "enabled": false
        }
      }
    },
    {
      "name": "StudioProtectionFilter-SSO",
      "type": "ChainOfFilters",
      "config": {
        "filters": [
          {
            "type": "SingleSignOnFilter",
            "config": {
              "amService": "AmService"
            }
          },
          {
            "type": "CsrfFilter",
            "config": {
              "cookieName": "&{SsoTokenCookieOrHeader}",
              "failureHandler": {
                "type": "StaticResponseHandler",
                "config": {
                  "status": 403,
                  "headers": {
                    "Content-Type": [
                      "text/plain"
                    ]
                  },
                  "entity": "Request forbidden"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "StudioProtectionFilter-AOF",
      "type": "ChainOfFilters",
      "config": {
        "filters": [
          {
            "type": "ScriptableFilter",
            "config": {
              "type": "application/x-groovy",
              "source": [
                "import org.forgerock.services.context.ClientContext",
                "def clientContext = context.asContext(ClientContext.class)",
                "logger.debug('Studio access from client {}, forwarded for {}', clientContext.getRemoteAddress(), request.headers['X-Forwarded-For'].getClientIpAddress())",
                "return next.handle(context, request)"
              ]
            }
          },
          {
            "type": "AllowOnlyFilter",
            "config": {
              "rules": [ {
                "from": [ {
                  "ip": {
                    "_comment": "Ping Identity VPNs only",
                    "list": ["212.59.72.207", "18.158.145.64", "78.33.22.162", "188.39.235.130", "37.71.148.92"],
                    "resolver": "${request.headers['X-Forwarded-For'][0]}"
                  }
                } ]
              } ]
            }
          }
        ]
      }
    },
    {
      "name": "apiProtectionFilter",
      "type": "ChainOfFilters",
      "config": {
        "filters": [
          {
            "type": "ScriptableFilter",
            "config": {
              "type": "application/x-groovy",
              "file": "ApiProtection.groovy"
            }
          },
          {
            "type": "CorsFilter",
            "config": {
              "policies": [
                {
                  "acceptedOrigins": ["https://&{rs.fqdn}/"],
                  "acceptedMethods": ["GET", "POST", "DELETE"],
                  "acceptedHeaders": ["Content-Type"]
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "metricsProtectionFilter",
      "type": "ScriptableFilter",
      "config": {
        "type": "application/x-groovy",
        "file": "BasicAuthResourceServerFilter.groovy",
        "args": {
          "realm": "/",
          "username": "&{ig.metrics.username}",
          "password": "&{ig.metrics.password}"
        }
      }
    }
  ],
  "connectors": [
    {
      "port": 8080,
      "vertx": {
        "maxInitialLineLength": 8192,
        "maxTotalHeadersSize": 24576
      }
    }
  ],
  "adminConnector": {
    "port": 8085
  },
  "mode": "DEVELOPMENT",
  "studioProtectionFilter": "StudioProtectionFilter-AOF",
  "_studioProtectionFilter.comment": "The referenced filter is temporary only to apply IP constraints",
  "apiProtectionFilter": "apiProtectionFilter",
  "metricsProtectionFilter": "metricsProtectionFilter"
}
