{
  "comment": "Authorise access to token endpoint",
  "name": "54 - Open Banking OAuth2 token endpoint",
  "auditService": "AuditService-OB-Route",
  "baseURI": "https://&{identity.platform.fqdn}",
  "condition": "${matches(request.uri.path, '^/am/oauth2/realms/root/realms/&{am.realm}/access_token')}",
  "handler": {
    "type": "Chain",
    "config": {
      "filters": [
        "SBATFapiInteractionFilterChain",
        {
          "comment": "Add host to downstream request",
          "name": "HeaderFilter-ChangeHostToIAM",
          "type": "HeaderFilter",
          "config": {
            "messageType": "REQUEST",
            "remove": [
              "host",
              "X-Forwarded-Host"
            ],
            "add": {
              "X-Forwarded-Host": [
                "&{ig.fqdn}"
              ]
            }
          }
        },
        {
          "comment": "Add gateway access token to request (custom AT modification script checks access token to enforce route via IG)",
          "type": "ClientCredentialsOAuth2ClientFilter",
          "config": {
            "clientId": "&{ig.client.id}",
            "clientSecretId": "ig.client.secret",
            "secretsProvider": "SystemAndEnvSecretStore-IAM",
            "tokenEndpoint": "https://&{identity.platform.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/access_token",
            "scopes": [
              "trusted_gateway"
            ],
            "handler": "ForgeRockClientHandler"
          }
        },
        {
          "comment": "Add gateway access token to downstream request",
          "name": "AddGatewayAuthorization",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "AddGatewayAuthorization.groovy"
          }
        },
        {
          "comment": "Verify that the client's transport cert is valid and is mapped to their SSA",
          "name": "TokenEndpointTransportCertValidationFilter",
          "type": "TokenEndpointTransportCertValidationFilter",
          "config": {
            "idmGetApiClientBaseUri": "&{urls.idmGetApiClientBaseUri}",
            "idmClientHandler": "IDMClientHandler",
            "trustedDirectoryService": "TrustedDirectoriesService",
            "jwkSetService": "OBJwkSetService",
            "certificateRetriever": "HeaderCertificateRetriever",
            "transportCertValidator": "OBTransportCertValidator"
          }
        },
        {
          "name": "ReSignIdTokenFilter",
          "type": "ReSignIdTokenFilter",
          "comment": "Re-sign the id_token returned by AM to fix OB keyId issue",
          "config": {
            "verificationSecretsProvider": "SecretsProvider-AmJWK",
            "verificationSecretId": "any.value.in.regex.format",
            "signingKeyId": "&{ig.ob.aspsp.signing.kid}",
            "signingSecretsProvider": "SecretsProvider-ASPSP",
            "signingKeySecretId": "jwt.signer",
            "endpointType": "access_token"
          }
        }
      ],
      "handler": "FRReverseProxyHandler"
    }
  }
}